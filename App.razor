@using Infragistics.Documents.Excel

<div class="container vertical">

    <div class="options vertical">
        <button @onclick="CreateXlsx">Save Workbook to XLSX</button>
        <button @onclick="CreateXls">Save Workbook to XLS</button>
    </div>
</div>

@code {

    [Inject]
    public IJSRuntime Runtime { get; set; }
    public bool canSave = false;
    public Workbook wb;
    public Worksheet ws;
    public List<string> worksheetRegion = null;
    public string selectedRegion = null;
    private Random Rand = new Random();

    protected override void OnInitialized()
    {
        this.WorkbookCreate();
    }

    private async Task CreateXls()
    {
        await this.SaveFileAsync(this.wb, "ExcelWorkbook", WorkbookFormat.Excel97To2003);
    }

    private async Task CreateXlsx()
    {
        await this.SaveFileAsync(this.wb, "ExcelWorkbook", WorkbookFormat.Excel2007);
    }

    public void WorkbookCreate()
    {
        Workbook.InProcessRuntime = this.Runtime as IJSInProcessRuntime;

        var wb = new Workbook(WorkbookFormat.Excel2007);
        var employeeSheet = wb.Worksheets.Add("Employees");
        var employeeHeader = employeeSheet.Rows[0];
        var companies = new [] { "Amazon", "Ford", "Jaguar", "Tesla", "IBM", "Microsoft" };
        var firstNames = new [] { "Andrew", "Mike", "Martin", "Ann", "Victoria", "John", "Brian", "Jason", "David" };
        var lastNames = new [] { "Smith", "Jordan", "Johnson", "Anderson", "Louis", "Phillips", "Williams" };
        var countries = new [] { "UK", "France", "USA", "Germany", "Poland", "Brazil" };
        var titles = new [] { "Sales Rep.", "Engineer", "Administrator", "Manager" };
        var employeeColumns = new [] { "Name", "Company", "Title", "Age", "Country" };
        for (var col = 0; col < employeeColumns.Length; col++)
        {
            employeeSheet.Columns[col].Width = 5000;
            employeeHeader.SetCellValue(col, employeeColumns[col]);
        }
        for (var i = 1; i < 20; i++)
        {
            var company = this.GetItem(companies);
            var title = this.GetItem(titles);
            var country = this.GetItem(countries);
            var name = this.GetItem(firstNames) + " " + this.GetItem(lastNames);
            var salary = this.GetRandom(45000, 95000);
            var age = this.GetRandom(20, 65);
            var wr = employeeSheet.Rows[i] as WorksheetRow;
            wr.SetCellValue(0, name);
            wr.SetCellValue(1, company);
            wr.SetCellValue(2, title);
            wr.SetCellValue(3, age);
            wr.SetCellValue(4, country);
            wr.SetCellValue(5, salary);
        }
        var expanseSheet = wb.Worksheets.Add("Expanses");
        var expanseHeader = expanseSheet.Rows[0];
        var expanseNames = new [] { "Year", "Computers", "Research", "Travel", "Salary", "Software" };
        var expanseCol = 0;
        foreach (var key in expanseNames)
        {
            expanseSheet.Columns[expanseCol].Width = 5000;
            expanseHeader.SetCellValue(expanseCol, key);
            for (var i = 1; i < 20; i++)
            {
                var wr = expanseSheet.Rows[i];
                if (key == "Year")
                {
                    wr.SetCellValue(expanseCol, 2010 + i);
                }
                else if (key == "Computers")
                {
                    wr.SetCellValue(expanseCol, this.GetRandom(50000, 65000));
                }
                else if (key == "Research")
                {
                    wr.SetCellValue(expanseCol, this.GetRandom(150000, 165000));
                }
                else if (key == "Travel")
                {
                    wr.SetCellValue(expanseCol, this.GetRandom(20000, 25000));
                }
                else if (key == "Salary")
                {
                    wr.SetCellValue(expanseCol, this.GetRandom(4000000, 450000));
                }
                else if (key == "Software")
                {
                    wr.SetCellValue(expanseCol, this.GetRandom(100000, 150000));
                }
            }
            expanseCol++;
        }
        var incomeSheet = wb.Worksheets.Add("Income");
        var incomeHeader = incomeSheet.Rows[0];
        var incomeNames = new [] { "Year", "Phones", "Computers", "Software", "Services", "Royalties" };
        var incomeCol = 0;
        foreach (var key in incomeNames)
        {
            incomeSheet.Columns[incomeCol].Width = 5000;
            incomeHeader.SetCellValue(incomeCol, key);
            for (var i = 1; i < 20; i++)
            {
                var wr = incomeSheet.Rows[i];
                if (key == "Year")
                {
                    wr.SetCellValue(incomeCol, 2010 + i);
                }
                else if (key == "Software")
                {
                    wr.SetCellValue(incomeCol, this.GetRandom(700000, 850000));
                }
                else if (key == "Computers")
                {
                    wr.SetCellValue(incomeCol, this.GetRandom(250000, 265000));
                }
                else if (key == "Royalties")
                {
                    wr.SetCellValue(incomeCol, this.GetRandom(400000, 450000));
                }
                else if (key == "Phones")
                {
                    wr.SetCellValue(incomeCol, this.GetRandom(6000000, 650000));
                }
                else if (key == "Services")
                {
                    wr.SetCellValue(incomeCol, this.GetRandom(700000, 750000));
                }
            }
            incomeCol++;
        }
        this.WorkbookParse(wb);
    }

    public void WorkbookParse(Workbook wb)
    {
        if (wb == null)
        {
            this.worksheetRegion = null;
            this.selectedRegion = null;
        }
        else
        {
            var names = new List<string>();
            var worksheets = wb.Worksheets;
            var wsCount = worksheets.Count;
            for (var i = 0; i < wsCount; i++)
            {
                var tables = worksheets[i].Tables;
                var tCount = tables.Count;
                for (var j = 0; j < tCount; j++)
                {
                    names.Add(worksheets[i].Name + " - " + tables[j].Name);
                }
            }
            this.worksheetRegion = names;
            this.selectedRegion = names.Count > 0 ? names[0] : null;
        }
        this.wb = wb;
        this.canSave = wb != null;
    }

    public double GetRandom(double min, double max)
    {
        return Math.Round(min + (Rand.NextDouble() * (max - min)));
    }

    public string GetItem(string[] array)
    {
        var index = (int)Math.Round(GetRandom(0, array.Length - 1));
        return array[index];
    }

    private async ValueTask SaveFileAsync(Workbook workbook, string fileNameWithoutExtension, WorkbookFormat format)
    {
        var ms = new System.IO.MemoryStream();
        workbook.SetCurrentFormat(format);
        workbook.Save(ms);

        var extension = workbook.CurrentFormat switch
        {
            WorkbookFormat.StrictOpenXml or WorkbookFormat.Excel2007 => ".xlsx",
            WorkbookFormat.Excel2007MacroEnabled => ".xlsm",
            WorkbookFormat.Excel2007MacroEnabledTemplate => ".xltm",
            WorkbookFormat.Excel2007Template => ".xltx",
            WorkbookFormat.Excel97To2003 => ".xls",
            WorkbookFormat.Excel97To2003Template => ".xlt",
            _ => ""
        };

        var fileName = fileNameWithoutExtension + extension;

        var mime = workbook.CurrentFormat switch
        {
            WorkbookFormat.Excel2007 or
            WorkbookFormat.Excel2007MacroEnabled or
            WorkbookFormat.Excel2007MacroEnabledTemplate or
            WorkbookFormat.Excel2007Template or
            WorkbookFormat.StrictOpenXml => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            WorkbookFormat.Excel97To2003 or WorkbookFormat.Excel97To2003Template => "application/vnd.ms-excel",
            _ => "application/octet-stream"
        };

        var bytes = ms.ToArray();

        await this.Runtime.InvokeVoidAsync("BlazorDownloadFile", fileName, mime, bytes);
    }
}
